description = 'YTI XBRL Taxonomy Generator'

apply from: "gradle/dependencies.gradle"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinPluginVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:${spotlessPluginVersion}"
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}


allprojects { subproj ->
    apply plugin: 'kotlin'
    apply plugin: 'java-library'
    apply plugin: 'idea'

    group = 'fi.vm.yti.taxgen'

    repositories {
        //mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/kotlin/exposed"
        }
        maven {
            url 'https://jitpack.io'
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = '1.3'
            languageVersion = '1.3'
        }
    }

    test {
        useJUnitPlatform()

        beforeTest { TestDescriptor descriptor ->
            logger.lifecycle("==> ${descriptor.className}: ${descriptor.name}")
        }
    }
}


configure(rootProject) {
    jar.enabled = false
    uploadArchives.enabled = false
}


subprojects { subproj ->
    apply plugin: 'maven-publish'
    apply plugin: 'com.diffplug.gradle.spotless'

    configurations {
        shadowed
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin/'
        test.java.srcDirs += 'src/test/kotlin/'
        main.compileClasspath += configurations.shadowed
        test.runtimeClasspath += configurations.shadowed
    }


    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId subproj.group
                artifactId subproj.name
                version '0.1-SNAPSHOT'

                pom.withXml {
                    asNode().appendNode('description', subproj.description)
                }
                artifact jar
                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    spotless {

        java {
            trimTrailingWhitespace()
            endWithNewline()
        }

        kotlin {
            ktlint("${ktlintVersion}")
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}
